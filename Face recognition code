import os
import cv2
import numpy as np
from os import listdir
from os.path import isfile, join
import speech_recognition
import pyttsx3

os.system('pip install opencv_contrib_python')

face_classifier = cv2.CascadeClassifier(r"C:\Users\user\PycharmProjects\Opencv\haarcascades"
                                        r"\haarcascade_frontalface_default.xml")


def face_extractor(img):
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    faces = face_classifier.detectMultiScale(gray, 1.3, 5)

    if faces is ():
        return None

    for (x, y, w, h) in faces:
        cropped_face = img[y:y + h, x:x + w]

    return cropped_face


name1 = input("Enter your name=")
cap = cv2.VideoCapture(0)
count = 0
print(count)

while True:
    ret, frame = cap.read()
    if face_extractor(frame) is not None:
        count = count + 1
        face = cv2.resize(face_extractor(frame), (200, 200))
        face = cv2.cvtColor(face, cv2.COLOR_BGR2GRAY)

        file_name_path = 'C:/Users/user/PycharmProjects/Opencv/faces/' + name1 + str(count) + '.jpg'
        cv2.imwrite(file_name_path, face)

        cv2.putText(face, str(count), (50, 50), cv2.FONT_HERSHEY_COMPLEX, 1, (0, 255, 0), 2)
        cv2.imshow('Face Cropper', face)

    else:
        print("Face not Found")
        pass

    if cv2.waitKey(1) == 13 or count == 100:
        break

cap.release()
cv2.destroyAllWindows()
print('Collecting Samples Complete!!!')

data_path = 'C:/Users/user/PycharmProjects/Opencv/faces/'
onlyfiles = [f for f in listdir(data_path) if isfile(join(data_path, f))]

Training_Data, Labels = [], []
ind = {}
for i, files in enumerate(onlyfiles):
    image_path = data_path + onlyfiles[i]
    val = 0
    copy = onlyfiles[i]
    for j in range(len(onlyfiles[i])):
        if copy[j] == '0' or copy[j] == '1' or copy[j] == '2' or copy[j] == '3' or copy[j] == '4' or copy[j] == '5' or \
                copy[j] == '6' or copy[j] == '7' or copy[j] == '8' or copy[j] == '9':
            val = j
            break
    name = copy[0:val]
    images = cv2.imread(image_path, cv2.IMREAD_GRAYSCALE)
    Training_Data.append(np.asarray(images, dtype=np.uint8))
    Labels.append(i)
    ind[i] = name

Labels = np.asarray(Labels, dtype=np.int32)

model = cv2.face.LBPHFaceRecognizer_create()

model.train(np.asarray(Training_Data), np.asarray(Labels))

print("Model Training Complete!!!!!")

face_classifier = cv2.CascadeClassifier(r"C:\Users\user\PycharmProjects\Opencv\haarcascades"
                                        r"\haarcascade_frontalface_default.xml")

while True:
    def face_detector(img, size=0.5):
        gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
        faces = face_classifier.detectMultiScale(gray, 1.3, 5)
        print(img.shape)
        if faces is ():
            return img, []
        cx = 240
        cy = 320
        h_min = 0
        w_min = 0
        yo = 0
        xo = 0
        i = 0
        for (x, y, w, h) in faces:
            cv2.rectangle(img, (x, y), (x + w, y + h), (0, 255, 255), 2)
            cv2.rectangle(img, (240, 320), (240 + w, 320 + h), (0, 255, 255), 2)
            if i > 0:
                if cx > x + (w / 2):
                    wb = cx - x - w / 2
                else:
                    wb = x + w / 2 - cx
                if wb < w_min:
                    w_min = w
                    yo = y
                    xo = x
                    h_min = h
            else:
                w_min = w
                h_min = h
                xo = x
                yo = y
        roi = img[yo:yo + h_min, xo:xo + w_min]
        print("x0=", xo)
        if cx > xo + w_min:
            theta = 0.001
            print("theta=", theta)
        else:
            theta = -0.001
            print("theta-=", theta)
        roi = cv2.resize(roi, (200, 200))
        print("roi=", roi)
        print("faces=", faces)
        print("img=", img)
        return img, roi


    name2 = " "
    m = 0
    cap = cv2.VideoCapture(0)

    while True:

        ret, frame = cap.read()

        image, face = face_detector(frame)

        try:
            face = cv2.cvtColor(face, cv2.COLOR_BGR2GRAY)
            result = model.predict(face)
            print("result", result)

            if result[1] < 500:
                confidence = int(100 * (1 - (result[1]) / 300))
                display_string = str(confidence) + '% Confidence it is user'
            cv2.putText(image, display_string, (100, 120), cv2.FONT_HERSHEY_COMPLEX, 1, (250, 120, 255), 2)

            if confidence > 75:
                cv2.putText(image, "Hi, " + ind[result[0]], (250, 450), cv2.FONT_HERSHEY_COMPLEX, 1, (0, 255, 0), 2)
                cv2.imshow('Face Cropper', image)
                name2 = ind[result[0]]



            else:
                cv2.putText(image, "Unknown Person", (250, 450), cv2.FONT_HERSHEY_COMPLEX, 1, (0, 0, 255), 2)
                cv2.imshow('Face Cropper', image)


        except:
            cv2.putText(image, "Face Not Found", (250, 450), cv2.FONT_HERSHEY_COMPLEX, 1, (255, 0, 0), 2)
            cv2.imshow('Face Cropper', image)
            pass

        if cv2.waitKey(1) == 13:
            break
    text_val = "Hi" + name2

    cap.release()
    cv2.destroyAllWindows()

    converter = pyttsx3.init()
    converter.setProperty('rate', 100)
    converter.setProperty('volume', 0.7)

    converter.say('Hi' + name2)
    converter.runAndWait()


    def record_voice():
        microphone = speech_recognition.Recognizer()

        with speech_recognition.Microphone() as live_phone:
            microphone.adjust_for_ambient_noise(live_phone)

        print("I'm trying to hear you: ")
        audio = microphone.listen(live_phone)
        try:
            phrase = microphone.recognize_google(audio, language='en')
            return phrase
        except speech_recognition.UnkownValueError:
            return "I didn't understand what you said"


    if __name__ == '__main__':
        phrase = record_voice()
        if phrase == 'What is your name':
            converter.say('My name is Iron Man')

